{
  "nodes": [
    {
      "parameters": {
        "path": "6bb43ca6-32e5-47f2-a9c9-6a519ca72a82"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "typeVersion": 2,
      "position": [
        -400,
        -1888
      ],
      "id": "d99ea56d-e974-4e69-a6c1-fbe2b837069e",
      "name": "MCP Server Trigger",
      "webhookId": "6bb43ca6-32e5-47f2-a9c9-6a519ca72a82"
    },
    {
      "parameters": {
        "toolDescription": "Creates a new rectangle node in Figma at specified coordinates. Parameters: x (number), y (number), width (number), height (number), name (string).",
        "serverId": "hellofigma",
        "command": "create_rectangle",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the rectangle should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the rectangle should be placed on the Figma canvas`, 'number') }}",
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The width in pixels for the rectangle`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The height in pixels for the rectangle`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the rectangle layer in Figma`, 'string') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this rectangle should be placed (leave empty for root level)`, 'string') }}",
            "fillColorR": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__R_', `Red component of the fill color (0-1 range)`, 'number') }}",
            "fillColorG": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__G_', `Green component of the fill color (0-1 range)`, 'number') }}",
            "fillColorB": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__B_', `Blue component of the fill color (0-1 range)`, 'number') }}",
            "fillColorA": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__A_', `Alpha/transparency component of the fill color (0-1 range)`, 'number') }}",
            "strokeColorR": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__R_', `Red component of the stroke/border color (0-1 range)`, 'number') }}",
            "strokeColorG": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__G_', `Green component of the stroke/border color (0-1 range)`, 'number') }}",
            "strokeColorB": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__B_', `Blue component of the stroke/border color (0-1 range)`, 'number') }}",
            "strokeColorA": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__A_', `Alpha/transparency component of the stroke color (0-1 range)`, 'number') }}",
            "strokeWeight": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Weight', `Thickness of the stroke/border in pixels`, 'number') }}",
            "initialOpacity": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Opacity', `Opacity level of the rectangle (0-1 range)`, 'number') }}",
            "initialRotation": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Rotation', `Rotation angle of the rectangle in degrees`, 'number') }}",
            "initialCornerRadius": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Corner_Radius', `Corner radius for rounded corners in pixels`, 'number') }}",
            "addDropShadow": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Add_Drop_Shadow', `Whether to add a drop shadow effect to the rectangle`, 'boolean') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -320,
        -1888
      ],
      "id": "cfa1b094-5d92-4db1-9ab1-44949b18e8db",
      "name": "Create Rectangle"
    },
    {
      "parameters": {
        "toolDescription": "Creates a new frame node in Figma at specified coordinates. Parameters: x (number), y (number), width (number), height (number), name (string).",
        "serverId": "hellofigma",
        "command": "create_frame",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the frame should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the frame should be placed on the Figma canvas`, 'number') }}",
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The width in pixels for the frame`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The height in pixels for the frame`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the frame layer in Figma`, 'string') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this frame should be placed (leave empty for root level)`, 'string') }}",
            "fillColorR": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__R_', `Red component of the fill color (0-1 range)`, 'number') }}",
            "fillColorG": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__G_', `Green component of the fill color (0-1 range)`, 'number') }}",
            "fillColorB": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__B_', `Blue component of the fill color (0-1 range)`, 'number') }}",
            "fillColorA": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__A_', `Alpha/transparency component of the fill color (0-1 range)`, 'number') }}",
            "strokeColorR": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__R_', `Red component of the stroke/border color (0-1 range)`, 'number') }}",
            "strokeColorG": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__G_', `Green component of the stroke/border color (0-1 range)`, 'number') }}",
            "strokeColorB": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__B_', `Blue component of the stroke/border color (0-1 range)`, 'number') }}",
            "strokeColorA": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__A_', `Alpha/transparency component of the stroke color (0-1 range)`, 'number') }}",
            "strokeWeight": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Weight', `Thickness of the stroke/border in pixels`, 'number') }}",
            "initialOpacity": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Opacity', `Opacity level of the frame (0-1 range)`, 'number') }}",
            "initialRotation": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Rotation', `Rotation angle of the frame in degrees`, 'number') }}",
            "initialCornerRadius": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Corner_Radius', `Corner radius for rounded corners in pixels`, 'number') }}",
            "addDropShadow": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Add_Drop_Shadow', `Whether to add a drop shadow effect to the frame`, 'boolean') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -240,
        -1888
      ],
      "id": "ede44f51-3989-46bb-a957-581da783fd05",
      "name": "Create Frame"
    },
    {
      "parameters": {
        "toolDescription": "Creates a new text node in Figma with specified content and styling. Parameters: x (number), y (number), text (string), fontSize (number), name (string).",
        "serverId": "hellofigma",
        "command": "create_text",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the text should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the text should be placed on the Figma canvas`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the text layer in Figma`, 'string') }}",
            "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Text_Content', `The actual text content to display in the text node`, 'string') }}",
            "fontSize": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Font_Size', `The font size in pixels for the text`, 'number') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this text should be placed (leave empty for root level)`, 'string') }}",
            "fontColorR": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Font_Color__R_', `Red component of the font color (0-1 range)`, 'number') }}",
            "fontColorG": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Font_Color__G_', `Green component of the font color (0-1 range)`, 'number') }}",
            "fontColorB": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Font_Color__B_', `Blue component of the font color (0-1 range)`, 'number') }}",
            "fontColorA": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Font_Color__A_', `Alpha/transparency component of the font color (0-1 range)`, 'number') }}",
            "initialOpacity": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Opacity', `Opacity level of the text (0-1 range)`, 'number') }}",
            "initialRotation": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Rotation', `Rotation angle of the text in degrees`, 'number') }}",
            "addDropShadow": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Add_Drop_Shadow', `Whether to add a drop shadow effect to the text`, 'boolean') }}",
            "strokeWeight": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Weight', `Thickness of the text stroke/outline in pixels`, 'number') }}",
            "fontFamily": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Font_Family', `Font family name (e.g., Inter, Roboto, Arial)`, 'string') }}",
            "letterSpacing": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Letter_Spacing', `Spacing between letters in pixels`, 'number') }}",
            "lineHeight": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Line_Height', `Line height for multi-line text in pixels`, 'number') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -160,
        -1888
      ],
      "id": "67e953bd-5d54-48fa-bb82-c3806c7fb9c7",
      "name": "Create Text"
    },
    {
      "parameters": {
        "toolDescription": "Retrieves information about the current Figma document including name, id, and structure. No parameters required.",
        "serverId": "hellofigma",
        "command": "get_document_info"
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -80,
        -1888
      ],
      "id": "aff72168-65b0-4f36-8dd8-f03169c0c10a",
      "name": "Get Document Info"
    },
    {
      "parameters": {
        "toolDescription": "Gets the currently selected nodes in Figma and returns their IDs and basic information. No parameters required.",
        "serverId": "hellofigma",
        "command": "get_selection"
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        0,
        -1888
      ],
      "id": "dd72cbdb-bfd7-4038-87cb-a5dcc307de5b",
      "name": "Get Selection"
    },
    {
      "parameters": {
        "toolDescription": "Moves an existing node to new coordinates in Figma. Parameters: nodeId (string), x (number), y (number).",
        "serverId": "hellofigma",
        "command": "move_node",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the node should be moved on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the node should be moved on the Figma canvas`, 'number') }}",
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to be moved`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        80,
        -1680
      ],
      "id": "180d88b8-8821-4180-9a1d-1722de229c7d",
      "name": "Move Node"
    },
    {
      "parameters": {
        "toolDescription": "Resizes an existing node to new dimensions in Figma. Parameters: nodeId (string), width (number), height (number).",
        "serverId": "hellofigma",
        "command": "resize_node",
        "parameters": {
          "params": {
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The new width in pixels for the resized node`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The new height in pixels for the resized node`, 'number') }}",
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        160,
        -1680
      ],
      "id": "232c03de-a9e0-41ac-9227-c8522737c524",
      "name": "Resize Node"
    },
    {
      "parameters": {
        "toolDescription": "Permanently deletes a node from Figma document. Parameters: nodeId (string).",
        "serverId": "hellofigma",
        "command": "delete_node",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to be deleted`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        240,
        -1680
      ],
      "id": "124239f0-f734-4b7e-82b9-e723db19b4d7",
      "name": "Delete Node"
    },
    {
      "parameters": {
        "toolDescription": "Sets the fill color of a node in Figma using RGBA values. Parameters: nodeId (string), colorR (number 0-1), colorG (number 0-1), colorB (number 0-1), colorA (number 0-1).",
        "serverId": "hellofigma",
        "command": "set_fill_color",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}",
            "colorR": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Red_Value', `The red color component value between 0.0 and 1.0`, 'number') }}",
            "colorG": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Green_Value', `The green color component value between 0.0 and 1.0`, 'number') }}",
            "colorB": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Blue_Value', `The blue color component value between 0.0 and 1.0`, 'number') }}",
            "colorA": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Alpha_Value', `The alpha transparency value between 0.0 (transparent) and 1.0 (opaque)`, 'number') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        320,
        -1680
      ],
      "id": "89a6aa0f-5d37-47c7-994b-3fcb174281c2",
      "name": "Set Fill Color"
    },
    {
      "parameters": {
        "toolDescription": "Sets the stroke color of a node in Figma using RGBA values. Parameters: nodeId (string), colorR (number 0-1), colorG (number 0-1), colorB (number 0-1), colorA (number 0-1).",
        "serverId": "hellofigma",
        "command": "set_stroke_color",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}",
            "colorR": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Red_Value', `The red color component value between 0.0 and 1.0`, 'number') }}",
            "colorG": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Green_Value', `The green color component value between 0.0 and 1.0`, 'number') }}",
            "colorB": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Blue_Value', `The blue color component value between 0.0 and 1.0`, 'number') }}",
            "colorA": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Alpha_Value', `The alpha transparency value between 0.0 (transparent) and 1.0 (opaque)`, 'number') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -400,
        -1680
      ],
      "id": "48803eae-4ed3-4d35-8d70-c9214c935311",
      "name": "Set Stroke Color"
    },
    {
      "parameters": {
        "toolDescription": "Creates a duplicate copy of an existing node in Figma. Parameters: nodeId (string), x (number - optional position), y (number - optional position).",
        "serverId": "hellofigma",
        "command": "clone_node",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to be cloned`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -320,
        -1488
      ],
      "id": "bea83b13-4e23-4e0b-8681-57d365730108",
      "name": "Clone Node"
    },
    {
      "parameters": {
        "toolDescription": "Exports a node as an image file from Figma. Parameters: nodeId (string), scale (number), format (string: PNG/JPG/SVG).",
        "serverId": "hellofigma",
        "command": "export_node_as_image",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}",
            "scale": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Export_Scale', `The export scale factor (e.g., 1 for original size, 2 for 2x resolution)`, 'number') }}",
            "format": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Export_Format', `The export file format: PNG for transparent images, JPG for photos, SVG for vector graphics`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -240,
        -1488
      ],
      "id": "787c237c-1bd0-436c-b7b3-76ec4d07d103",
      "name": "Export Node as Image"
    },
    {
      "parameters": {
        "toolDescription": "Retrieves detailed information about a specific node including properties, position, and styling. Parameters: nodeId (string).",
        "serverId": "hellofigma",
        "command": "get_node_info",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to retrieve detailed information from`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -160,
        -1488
      ],
      "id": "f6b61f47-c8a7-4ff9-a0b8-74679fb0b372",
      "name": "Get Node Info"
    },
    {
      "parameters": {
        "toolDescription": "Updates the text content of an existing text node in Figma. Parameters: nodeId (string), text (string).",
        "serverId": "hellofigma",
        "command": "set_text_content",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -80,
        -1488
      ],
      "id": "1bf390d8-3ae6-4841-966c-49957791ca9f",
      "name": "Set Text Content"
    },
    {
      "parameters": {
        "toolDescription": "Retrieves all available color, text, and effect styles from the Figma document. No parameters required.",
        "serverId": "hellofigma",
        "command": "get_styles"
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        0,
        -1488
      ],
      "id": "3df69d2e-ece0-4a82-a995-1fc6747cbd32",
      "name": "Get Styles"
    },
    {
      "parameters": {
        "toolDescription": "Gets list of all local components available in the current Figma file with their keys and names. No parameters required.",
        "serverId": "hellofigma",
        "command": "get_local_components"
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        80,
        -1280
      ],
      "id": "f32bba2d-f97a-4c92-9ec9-a15ccfa40727",
      "name": "Get Local Components"
    },
    {
      "parameters": {
        "toolDescription": "Creates an instance of an existing component in Figma. Parameters: componentKey (string), x (number), y (number), name (string).",
        "serverId": "hellofigma",
        "command": "create_component_instance",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the component instance should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the component instance should be placed on the Figma canvas`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the component instance layer in Figma`, 'string') }}",
            "componentKey": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Component_Key', `The unique key identifier of the component to create an instance from`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        160,
        -1280
      ],
      "id": "db0b34e1-4015-4387-a72f-e79dfb6a6e6e",
      "name": "Create Component Instance"
    },
    {
      "parameters": {
        "toolDescription": "Sets the corner radius of a node in Figma to create rounded corners. Parameters: nodeId (string), cornerRadius (number).",
        "serverId": "hellofigma",
        "command": "set_corner_radius",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}",
            "cornerRadius": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Corner_Radius', `The corner radius value in pixels to apply to all corners of the node`, 'number') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        240,
        -1280
      ],
      "id": "9e2e9014-bc59-4976-86c1-9ed3aca64c3b",
      "name": "Set Corner Radius"
    },
    {
      "parameters": {
        "toolDescription": "Scans and returns all text nodes within a specified parent node or the entire document. Parameters: nodeId (string - optional parent node).",
        "serverId": "hellofigma",
        "command": "scan_text_nodes",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node to scan within. Leave empty to scan the entire document`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        320,
        -1280
      ],
      "id": "ca41bbdb-2841-4c4c-9d61-3c6352a8c305",
      "name": "Scan Text Nodes"
    },
    {
      "parameters": {
        "toolDescription": "Sets the auto layout mode of a frame node in Figma. Parameters: nodeId (string), layoutMode (string: NONE/HORIZONTAL/VERTICAL).",
        "serverId": "hellofigma",
        "command": "set_layout_mode",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}",
            "layoutMode": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Layout_Mode', `The auto layout direction: NONE (disable), HORIZONTAL (left to right), or VERTICAL (top to bottom)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -400,
        -1280
      ],
      "id": "0eb4dd5e-3f0e-40b0-94ec-669bcb1a024e",
      "name": "Set Layout Mode"
    },
    {
      "parameters": {
        "toolDescription": "Retrieves list of all available WebSocket channels for Figma plugin connections. No parameters required.",
        "serverId": "hellofigma"
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -320,
        -1088
      ],
      "id": "db2b6dcb-5f08-4036-a866-4ab69e11eb2d",
      "name": "Get Channels"
    },
    {
      "parameters": {
        "toolDescription": "Retrieves detailed information for multiple nodes at once. Parameters: nodeIds (string - comma separated node IDs).",
        "serverId": "hellofigma",
        "command": "get_nodes_info",
        "parameters": {
          "params": {
            "nodeIds": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_IDs', `Comma-separated list of node IDs to operate on (e.g., \"id1,id2,id3\")`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -240,
        -1088
      ],
      "id": "55fd2b91-4abc-4440-8974-4323797f2694",
      "name": "Get Nodes Info"
    },
    {
      "parameters": {
        "toolDescription": "Scans and finds all nodes of specified types within a parent node or document. Parameters: nodeTypes (string - comma separated types like TEXT,FRAME), nodeId (string - optional parent).",
        "serverId": "hellofigma",
        "command": "scan_nodes_by_types",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node to scan within. Leave empty to scan the entire document`, 'string') }}",
            "nodeTypes": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_Types', `Comma-separated list of node types to scan for (e.g., \"TEXT,FRAME,RECTANGLE\")`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -160,
        -1088
      ],
      "id": "94b7b087-f0cb-426d-b05f-047232d6fbcf",
      "name": "Scan Nodes by Types"
    },
    {
      "parameters": {
        "toolDescription": "Updates text content for multiple text nodes in a single operation. Parameters: textUpdates (string - JSON array of {nodeId, text} objects).",
        "serverId": "hellofigma",
        "command": "set_multiple_text_contents",
        "parameters": {
          "params": {
            "textUpdates": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Text_Updates', `JSON array of text update objects with nodeId and text properties, e.g., [{\"nodeId\":\"123\",\"text\":\"New text\"}]`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -80,
        -1088
      ],
      "id": "2168e289-2c42-4e3c-906e-0d0c2744c1d2",
      "name": "Set Multiple Text Contents"
    },
    {
      "parameters": {
        "toolDescription": "Deletes multiple nodes from Figma document in a batch operation. Parameters: nodeIds (string - comma separated node IDs).",
        "serverId": "hellofigma",
        "command": "delete_multiple_nodes",
        "parameters": {
          "params": {
            "nodeIds": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_IDs', `Comma-separated list of node IDs to operate on (e.g., \"id1,id2,id3\")`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        0,
        -1088
      ],
      "id": "158d7fe4-d929-4914-b7e2-ef30d92db8d8",
      "name": "Delete Multiple Nodes"
    },
    {
      "parameters": {
        "toolDescription": "Sets padding values for all sides of an auto layout frame. Parameters: nodeId (string), paddingTop (number), paddingRight (number), paddingBottom (number), paddingLeft (number).",
        "serverId": "hellofigma",
        "command": "set_padding",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}",
            "paddingTop": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Padding_Top', `The top padding value in pixels for the auto layout frame`, 'number') }}",
            "paddingRight": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Padding_Right', `The right padding value in pixels for the auto layout frame`, 'number') }}",
            "paddingBottom": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Padding_Bottom', `The bottom padding value in pixels for the auto layout frame`, 'number') }}",
            "paddingLeft": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Padding_Left', `The left padding value in pixels for the auto layout frame`, 'number') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        80,
        -880
      ],
      "id": "4ce145e1-aeac-4a76-9adc-f51e116c1d53",
      "name": "Set Padding"
    },
    {
      "parameters": {
        "toolDescription": "Sets alignment properties for auto layout frame axes. Parameters: nodeId (string), primaryAxisAlignItems (string), counterAxisAlignItems (string).",
        "serverId": "hellofigma",
        "command": "set_axis_align",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        160,
        -880
      ],
      "id": "460b0111-5f6b-4687-8b9d-9d859e91db1f",
      "name": "Set Axis Align"
    },
    {
      "parameters": {
        "toolDescription": "Sets sizing behavior for auto layout frame dimensions. Parameters: nodeId (string), horizontalSizing (string: FIXED/FILL_CONTAINER/HUG_CONTENTS), verticalSizing (string: FIXED/FILL_CONTAINER/HUG_CONTENTS).",
        "serverId": "hellofigma",
        "command": "set_layout_sizing",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        240,
        -880
      ],
      "id": "25279fe9-05aa-413e-b868-9533697f076d",
      "name": "Set Layout Sizing"
    },
    {
      "parameters": {
        "toolDescription": "Sets the spacing between child items in an auto layout frame. Parameters: nodeId (string), itemSpacing (number).",
        "serverId": "hellofigma",
        "command": "set_item_spacing",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}",
            "itemSpacing": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Item_Spacing', `The spacing in pixels between child items in the auto layout frame`, 'number') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        320,
        -880
      ],
      "id": "55bcc4aa-053c-4b16-9d35-f65c97ff6f58",
      "name": "Set Item Spacing"
    },
    {
      "parameters": {
        "toolDescription": "Retrieves all annotations from the document or a specific node. Parameters: nodeId (string - optional, if not provided gets document annotations).",
        "serverId": "hellofigma",
        "command": "get_annotations",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node to retrieve annotations from (optional - retrieves document annotations if not provided)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -400,
        -880
      ],
      "id": "899964f1-6789-495f-af27-52752032c275",
      "name": "Get Annotations"
    },
    {
      "parameters": {
        "toolDescription": "Creates or updates an annotation on a specific node in Figma. Parameters: nodeId (string), annotationText (string).",
        "serverId": "hellofigma",
        "command": "set_annotation",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the target node in Figma to perform the operation on`, 'string') }}",
            "annotationText": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Annotation_Text', `The text content for the annotation comment to be added to the node`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -320,
        -688
      ],
      "id": "190af2ef-d409-486c-ab45-d7e416298880",
      "name": "Set Annotation"
    },
    {
      "parameters": {
        "toolDescription": "Retrieves all override properties and values for a component instance. Parameters: nodeId (string - component instance ID).",
        "serverId": "hellofigma",
        "command": "get_instance_overrides",
        "parameters": {
          "params": {
            "nodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Node_ID', `The unique ID of the component instance node in Figma to retrieve override properties from`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -240,
        -688
      ],
      "id": "48babaf8-7f64-46dd-b058-970873875286",
      "name": "Get Instance Overrides"
    },
    {
      "parameters": {
        "toolDescription": "Applies property overrides to a component instance. Parameters: overridesData (string - JSON object with override properties).",
        "serverId": "hellofigma",
        "command": "set_instance_overrides",
        "parameters": {
          "params": {
            "overridesData": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Overrides_Data', `JSON object containing property overrides for the component instance (e.g., {\"propertyName\": \"newValue\"})`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -160,
        -688
      ],
      "id": "1539f4d1-67da-408f-a571-cebef47b6d70",
      "name": "Set Instance Overrides"
    },
    {
      "parameters": {
        "toolDescription": "Retrieves prototype interactions and reactions for specified nodes. Parameters: nodeIds (string - comma separated node IDs, optional).",
        "connectionMethod": "connect",
        "host": "localhost",
        "port": 3055,
        "serverId": "hellofigma",
        "command": "get_reactions",
        "parameters": {}
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -80,
        -688
      ],
      "id": "9f6ed6ee-30b3-4c2f-bfb1-ac21ce110d34",
      "name": "Get Reactions"
    },
    {
      "parameters": {
        "toolDescription": "Sets the default connector node for prototype flows. Parameters: connectorId (string - connector node ID).",
        "serverId": "hellofigma",
        "command": "set_default_connector",
        "parameters": {
          "params": {
            "connectorId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Connector_ID', `The node ID of the connector element to set as default for prototype flows`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        0,
        -688
      ],
      "id": "e4405ad2-aa45-451a-bf87-a7a1301e5121",
      "name": "Set Default Connector"
    },
    {
      "parameters": {
        "toolDescription": "Creates prototype connections between nodes for interactive flows. Parameters: connections (string - JSON array of connection objects).",
        "serverId": "hellofigma",
        "command": "create_connections",
        "parameters": {
          "params": {
            "connections": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Connections', `JSON array of connection objects defining prototype interactions between nodes (e.g., [{\"from\": \"nodeId1\", \"to\": \"nodeId2\", \"trigger\": \"ON_CLICK\"}])`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        80,
        -480
      ],
      "id": "3dfc1319-bd8b-4818-b3e3-3dc642e77bfe",
      "name": "Create Connections"
    },
    {
      "parameters": {
        "toolDescription": "Creates an image node in Figma from a URL or binary data. Parameters: url (string), x (number), y (number), width (number), height (number), name (string).",
        "serverId": "hellofigma",
        "command": "create_image_from_url",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the image should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the image should be placed on the Figma canvas`, 'number') }}",
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The width in pixels for the image frame`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The height in pixels for the image frame`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the image layer in Figma`, 'string') }}",
            "url": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Image_URL', `The URL of the image to load and create in Figma`, 'string') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this image should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        160,
        -480
      ],
      "id": "ec15c3c7-1cb5-47b2-8f4d-21305bc674c3",
      "name": "Create Image from URL"
    },
    {
      "parameters": {
        "toolDescription": "Creates a slider UI component in Figma. Parameters: x (number), y (number), width (number), height (number), minValue (number), maxValue (number), currentValue (number), name (string).",
        "serverId": "hellofigma",
        "command": "create_slider",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the slider should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the slider should be placed on the Figma canvas`, 'number') }}",
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The width in pixels for the slider component`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The height in pixels for the slider component`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the slider component in Figma`, 'string') }}",
            "minValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Min_Value', `The minimum value for the slider range`, 'number') }}",
            "maxValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Max_Value', `The maximum value for the slider range`, 'number') }}",
            "currentValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Current_Value', `The current value of the slider within the min-max range`, 'number') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this slider should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        240,
        -480
      ],
      "id": "6110ec38-1b58-423c-aacc-0cf96fb809e0",
      "name": "Create Slider"
    },
    {
      "parameters": {
        "toolDescription": "Creates an ellipse/circle shape in Figma. Parameters: x (number), y (number), width (number), height (number), name (string).",
        "serverId": "hellofigma",
        "command": "create_ellipse",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the ellipse should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the ellipse should be placed on the Figma canvas`, 'number') }}",
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The width in pixels for the ellipse`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The height in pixels for the ellipse`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the ellipse layer in Figma`, 'string') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this ellipse should be placed (leave empty for root level)`, 'string') }}",
            "fillColorR": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__R_', `Red component of the fill color (0-1 range)`, 'number') }}",
            "fillColorG": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__G_', `Green component of the fill color (0-1 range)`, 'number') }}",
            "fillColorB": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__B_', `Blue component of the fill color (0-1 range)`, 'number') }}",
            "fillColorA": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill_Color__A_', `Alpha/transparency component of the fill color (0-1 range)`, 'number') }}",
            "strokeColorR": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__R_', `Red component of the stroke/border color (0-1 range)`, 'number') }}",
            "strokeColorG": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__G_', `Green component of the stroke/border color (0-1 range)`, 'number') }}",
            "strokeColorB": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__B_', `Blue component of the stroke/border color (0-1 range)`, 'number') }}",
            "strokeColorA": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Color__A_', `Alpha/transparency component of the stroke color (0-1 range)`, 'number') }}",
            "strokeWeight": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Stroke_Weight', `Thickness of the stroke/border in pixels`, 'number') }}",
            "initialOpacity": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Opacity', `Opacity level of the ellipse (0-1 range)`, 'number') }}",
            "initialRotation": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Rotation', `Rotation angle of the ellipse in degrees`, 'number') }}",
            "addDropShadow": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Add_Drop_Shadow', `Whether to add a drop shadow effect to the ellipse`, 'boolean') }}",
            "arcStartAngle": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Arc_Start_Angle', `Starting angle for arc/donut shape in radians (0-6.28)`, 'number') }}",
            "arcEndAngle": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Arc_End_Angle', `Ending angle for arc/donut shape in radians (0-6.28)`, 'number') }}",
            "arcInnerRadius": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Arc_Inner_Radius', `Inner radius for donut shape in pixels`, 'number') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        320,
        -480
      ],
      "id": "ec35e32d-92b3-4a33-a004-79f49286a3dd",
      "name": "Create Ellipse"
    },
    {
      "parameters": {
        "toolDescription": "Creates a custom vector path in Figma using SVG path data. Parameters: pathData (string), x (number), y (number), name (string).",
        "serverId": "hellofigma",
        "command": "create_vector_path",
        "parameters": {
          "params": {
            "pathData": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('SVG_Path_Data', `SVG path data string (d attribute) for creating custom vector shapes`, 'string') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this vector path should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -400,
        -480
      ],
      "id": "203a3505-7a74-4b79-a397-cc3f80be29ed",
      "name": "Create Vector Path"
    },
    {
      "parameters": {
        "toolDescription": "Creates a button UI component in Figma. Parameters: x (number), y (number), width (number), height (number), text (string), buttonStyle (string), name (string).",
        "serverId": "hellofigma",
        "command": "create_button",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the button should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the button should be placed on the Figma canvas`, 'number') }}",
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The width in pixels for the button component`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The height in pixels for the button component`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the button component in Figma`, 'string') }}",
            "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Button_Text', `The text to display on the button`, 'string') }}",
            "buttonStyle": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Button_Style', `The visual style of the button: primary, secondary, or outline`, 'string') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this button should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -320,
        -272
      ],
      "id": "65c9c6ea-6ec8-45fc-9282-228b416e7392",
      "name": "Create Button"
    },
    {
      "parameters": {
        "toolDescription": "Creates complex shapes using boolean operations in Figma. Parameters: operation (string), sourceNodeIds (string), name (string).",
        "serverId": "hellofigma",
        "command": "create_boolean_operation",
        "parameters": {
          "params": {
            "operation": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Operation_Type', `The type of boolean operation: UNION, SUBTRACT, INTERSECT, or EXCLUDE`, 'string') }}",
            "sourceNodeIds": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Source_Node_IDs', `Comma-separated list of node IDs to combine using the boolean operation`, 'string') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this boolean operation result should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -240,
        -272
      ],
      "id": "b6301eda-6eb1-4960-b0bd-9f276e09abc1",
      "name": "Create Boolean Operation"
    },
    {
      "parameters": {
        "toolDescription": "Creates an icon in Figma from SVG data. Parameters: svgContent (string), pathData (string), x (number), y (number), width (number), height (number), name (string).",
        "serverId": "hellofigma",
        "command": "create_icon_from_svg",
        "parameters": {
          "params": {
            "pathData": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('SVG_Path_Data', `SVG path data string (d attribute) as alternative to svgContent`, 'string') }}",
            "svgContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('SVG_Content', `Complete SVG markup for icon creation`, 'string') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this icon should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -160,
        -272
      ],
      "id": "75293066-6fc6-442d-bbb3-d829e4844a7e",
      "name": "Create Icon from SVG"
    },
    {
      "parameters": {
        "toolDescription": "Creates an input field UI component in Figma. Parameters: x (number), y (number), width (number), height (number), placeholder (string), inputType (string), name (string).",
        "serverId": "hellofigma",
        "command": "create_input_field",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the input field should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the input field should be placed on the Figma canvas`, 'number') }}",
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The width in pixels for the input field component`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The height in pixels for the input field component`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the input field component in Figma`, 'string') }}",
            "placeholder": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Placeholder_Text', `The placeholder text to display in the input field`, 'string') }}",
            "inputType": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Input_Type', `The type of input field: text, password, email, or number`, 'string') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this input field should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -80,
        -272
      ],
      "id": "f4f89e57-e30b-4a02-a5dd-03e892b63947",
      "name": "Create Input Field"
    },
    {
      "parameters": {
        "toolDescription": "Creates a checkbox UI component in Figma. Parameters: x (number), y (number), width (number), height (number), label (string), checked (boolean), name (string).",
        "serverId": "hellofigma",
        "command": "create_checkbox",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the checkbox should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the checkbox should be placed on the Figma canvas`, 'number') }}",
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The width in pixels for the checkbox component`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The height in pixels for the checkbox component`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the checkbox component in Figma`, 'string') }}",
            "label": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Checkbox_Label', `The label text for the checkbox`, 'string') }}",
            "checked": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Checked_State', `The initial checked state of the checkbox (true/false)`, 'boolean') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this checkbox should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        0,
        -272
      ],
      "id": "3d8a43fc-7232-4d76-b68f-899b7e71ce2c",
      "name": "Create Checkbox"
    },
    {
      "parameters": {
        "toolDescription": "Creates a toggle switch UI component in Figma. Parameters: x (number), y (number), width (number), height (number), label (string), enabled (boolean), name (string).",
        "serverId": "hellofigma",
        "command": "create_toggle",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the toggle should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the toggle should be placed on the Figma canvas`, 'number') }}",
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The width in pixels for the toggle component`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The height in pixels for the toggle component`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the toggle component in Figma`, 'string') }}",
            "label": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Toggle_Label', `The label text for the toggle switch`, 'string') }}",
            "enabled": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Enabled_State', `The initial enabled state of the toggle (true/false)`, 'boolean') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this toggle should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        80,
        -80
      ],
      "id": "72d3d855-9a33-4585-a6fc-b2ac2950190c",
      "name": "Create Toggle"
    },
    {
      "parameters": {
        "toolDescription": "Creates a reusable symbol component in Figma from selected nodes. Parameters: sourceNodeId (string), name (string).",
        "serverId": "hellofigma",
        "command": "create_symbol",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the symbol should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the symbol should be placed on the Figma canvas`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the symbol component in Figma`, 'string') }}",
            "sourceNodeId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Source_Node_ID', `The node ID to create symbol from (if empty, uses current selection)`, 'string') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this symbol should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        160,
        -80
      ],
      "id": "faf5ad9b-4b6c-47e5-80a8-77c2dd7ae5f4",
      "name": "Create Symbol"
    },
    {
      "parameters": {
        "toolDescription": "Creates an avatar placeholder in Figma. Parameters: x (number), y (number), avatarSize (number), avatarType (string), avatarText (string), name (string).",
        "serverId": "hellofigma",
        "command": "create_avatar",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the avatar should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the avatar should be placed on the Figma canvas`, 'number') }}",
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The width in pixels for the avatar component`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The height in pixels for the avatar component`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the avatar component in Figma`, 'string') }}",
            "avatarType": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Avatar_Type', `The type of avatar: initials, profile, or icon`, 'string') }}",
            "avatarSize": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Avatar_Size', `The size of the avatar in pixels (e.g., 48 for 48x48px avatar)`, 'number') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this avatar should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        240,
        -80
      ],
      "id": "fcf94cdf-e40a-40bc-b05f-e088fd91d826",
      "name": "Create Avatar"
    },
    {
      "parameters": {
        "toolDescription": "Creates a progress bar component in Figma. Parameters: x (number), y (number), width (number), height (number), progress (number), progressStyle (string), showProgressText (boolean), name (string).",
        "serverId": "hellofigma",
        "command": "create_progress_bar",
        "parameters": {
          "params": {
            "x": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('X_Position', `The X coordinate position in pixels where the progress bar should be placed on the Figma canvas`, 'number') }}",
            "y": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Y_Position', `The Y coordinate position in pixels where the progress bar should be placed on the Figma canvas`, 'number') }}",
            "width": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Width', `The width in pixels for the progress bar component`, 'number') }}",
            "height": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Height', `The height in pixels for the progress bar component`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', `A descriptive name for the progress bar component in Figma`, 'string') }}",
            "progress": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Progress_Value', `The progress percentage value (0-100)`, 'number') }}",
            "progressStyle": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Progress_Style', `The style of progress bar: linear or circular`, 'string') }}",
            "showProgressText": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Show_Progress_Text', `Whether to show percentage text on progress bar (true/false)`, 'boolean') }}",
            "parentId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Parent_Node_ID', `The ID of the parent node where this progress bar should be placed (leave empty for root level)`, 'string') }}"
          }
        }
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        320,
        -80
      ],
      "id": "949580c8-2fe3-4e98-ac5d-b3c1dd8a3371",
      "name": "Create Progress Bar"
    },
    {
      "parameters": {
        "toolDescription": "Converts SVG content to Figma vector layers using native Figma API. Parameters: svgContent (string), x (number), y (number), name (string).",
        "serverId": "hellofigma",
        "command": "create_svg_to_vector"
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -400,
        -80
      ],
      "id": "434cb347-d486-48e7-9b50-8c6c3b896d94",
      "name": "Create SVG to Vector"
    },
    {
      "parameters": {
        "toolDescription": "Executes custom Figma API commands using raw JSON input. Parameters: customJson (string), nodeType (string).",
        "serverId": "hellofigma",
        "command": "execute_custom_command"
      },
      "type": "CUSTOM.figmationCommanderTool",
      "typeVersion": 1,
      "position": [
        -320,
        160
      ],
      "id": "a0534b66-c54d-420f-8a82-549cc52a0c05",
      "name": "Execute Custom Command"
    },
    {
      "parameters": {
        "toolDescription": "Provides strategic guidance for converting Figma prototype reactions to visual connector lines. This strategy includes step-by-step process using Figmation Commander commands."
      },
      "type": "CUSTOM.figmationStrategyTool",
      "typeVersion": 1,
      "position": [
        -240,
        368
      ],
      "id": "382d8104-8489-4b5b-a826-c7cfe8477eba",
      "name": "Reaction to Connector Strategy"
    },
    {
      "parameters": {
        "toolDescription": "Provides comprehensive strategy for implementing design systems in Figma using Figmation Commander commands. Includes component creation, organization, and maintenance workflows.",
        "strategyType": "design_system"
      },
      "type": "CUSTOM.figmationStrategyTool",
      "typeVersion": 1,
      "position": [
        -160,
        368
      ],
      "id": "e8389078-8386-41cd-b789-99be6a6814e3",
      "name": "Design System Strategy"
    },
    {
      "parameters": {
        "toolDescription": "Provides strategic guidance for organizing and maintaining component libraries in Figma. Includes atomic design principles and systematic component organization.",
        "strategyType": "component_library"
      },
      "type": "CUSTOM.figmationStrategyTool",
      "typeVersion": 1,
      "position": [
        -80,
        368
      ],
      "id": "413f8646-0dcf-42cc-abe6-35fd50ca9ab5",
      "name": "Component Library Strategy"
    },
    {
      "parameters": {
        "toolDescription": "Provides custom strategy guidance for Figma design workflows. Allows users to define their own strategic approach and best practices.",
        "strategyType": "custom"
      },
      "type": "CUSTOM.figmationStrategyTool",
      "typeVersion": 1,
      "position": [
        0,
        368
      ],
      "id": "ed88821d-bcb4-4b86-8fb1-92f6da7f63c3",
      "name": "Custom Strategy"
    }
  ],
  "connections": {
    "Create Rectangle": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Frame": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Text": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Document Info": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Selection": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Move Node": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Resize Node": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Node": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Fill Color": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Stroke Color": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Clone Node": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Export Node as Image": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Node Info": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Text Content": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Styles": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Local Components": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Component Instance": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Corner Radius": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Scan Text Nodes": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Layout Mode": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Channels": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Nodes Info": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Scan Nodes by Types": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Multiple Text Contents": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Multiple Nodes": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Padding": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Axis Align": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Layout Sizing": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Item Spacing": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Annotations": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Annotation": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Instance Overrides": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Instance Overrides": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Reactions": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Default Connector": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Connections": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Image from URL": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Slider": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Ellipse": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Vector Path": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Button": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Boolean Operation": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Icon from SVG": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Input Field": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Checkbox": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Toggle": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Symbol": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Avatar": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Progress Bar": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create SVG to Vector": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Execute Custom Command": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reaction to Connector Strategy": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Design System Strategy": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Component Library Strategy": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Custom Strategy": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "ae59e3c4dbc3b4aab3d81fc78280645903de4834ef0fa1a8e01178181c7a57a4"
  }
}